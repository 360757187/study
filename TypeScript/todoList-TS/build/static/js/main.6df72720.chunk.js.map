{"version":3,"sources":["components/Title.tsx","components/textInput/TextInput.tsx","components/list/Item.tsx","components/list/List.tsx","components/Footer.tsx","utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["props","addTodo","className","placeholder","onKeyPress","e","todo","todoSelect","editTodo","removeTodo","useState","edit","setEdit","editInput","createRef","useEffect","current","focus","type","defaultChecked","completed","onClick","id","style","display","onDoubleClick","content","ref","defaultValue","key","sureEditTodo","onBlur","title","list","length","map","item","index","switchType","UUID","result","characters","charactersLength","i","charAt","Math","floor","random","App","todoList","setTodoList","setList","setType","selectType","filter","Title","TextInput","currentTarget","value","checked","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6df72720.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default () => {\r\n\r\n  return (\r\n    <h1>todos</h1>\r\n  )\r\n}","import React from 'react'\r\nimport '../../App.css'\r\n\r\nexport default (props: any) => {\r\n  const { addTodo } = props;\r\n\r\n  return <input\r\n    className='text-input'\r\n    placeholder='请输入待办事项'\r\n    onKeyPress={(e: React.KeyboardEvent<HTMLInputElement>): void => addTodo(e)}\r\n  />;\r\n}","import React, { useState, useEffect, createRef } from 'react'\r\nimport '../../App.css'\r\n\r\nexport default (props: any) => {\r\n  const { todo, todoSelect, editTodo, removeTodo } = props;\r\n  const [edit, setEdit] = useState<boolean>(false);\r\n  const editInput = createRef<HTMLInputElement>();\r\n\r\n  \r\n  const sureEditTodo = (e: React.KeyboardEvent<HTMLInputElement>, id: string) => {\r\n    if (e.key === 'Enter') {\r\n      editTodo(e, id);\r\n      setEdit(false);\r\n    }\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (edit === true && editInput.current !== null)\r\n      editInput.current.focus();\r\n  }, [editInput, edit])\r\n\r\n  return (\r\n    <div className='item'>\r\n      <input type='radio' defaultChecked={todo.completed} onClick={(e) => todoSelect(e, todo.id)}></input>\r\n      <label style={{ display: !edit ? 'block' : 'none' }} className={todo.completed ? 'completed' : ''} onDoubleClick={() => setEdit(true)}>{todo.content}</label>\r\n      <input\r\n        ref={editInput}\r\n        style={{ display: edit ? 'block' : 'none' }}\r\n        defaultValue={todo.content}\r\n        placeholder='请输入待办事项'\r\n        onKeyPress={(e: React.KeyboardEvent<HTMLInputElement>): void => sureEditTodo(e, todo.id)}\r\n        onBlur={() => setEdit(false)}\r\n      />\r\n      <span title='删除事项' className='destory' onClick={() => removeTodo(todo.id)}>x</span>\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\nimport '../../App.css'\r\nimport TodoItem from './Item'\r\n\r\nexport default (props: any) => {\r\n\r\n  interface todo {\r\n    id: string,\r\n    content: string,\r\n    completed: boolean\r\n  }\r\n\r\n  const { list = [], todoSelect, editTodo, removeTodo } = props;\r\n\r\n  return (\r\n    list.length > 0 ? <div className='list'>\r\n      {\r\n        list.map((item: todo, index: number) => (\r\n          <TodoItem\r\n            key={item.id}\r\n            todo={item}\r\n            todoSelect={todoSelect}\r\n            editTodo={editTodo}\r\n            removeTodo={removeTodo}\r\n          />\r\n        ))\r\n      }\r\n    </div>\r\n      : <div className='list-empty'>暂无事项。。。</div>\r\n  );\r\n}","import React from 'react'\r\nimport '../App.css'\r\n\r\nexport default (props: any) => {\r\n  const { list, switchType, type } = props;\r\n\r\n  return <footer className='footer'>\r\n    <div>{list.length}条事项</div>\r\n    <div className='button-box'>\r\n      <div onClick={() => switchType('All')} className={type === 'All' ? 'button-selected' : ''}>All</div>\r\n      <div onClick={() => switchType('Active')} className={type === 'Active' ? 'button-selected' : ''}>Active</div>\r\n      <div onClick={() => switchType('Completed')} className={type === 'Completed' ? 'button-selected' : ''}>Completed</div>\r\n    </div>\r\n  </footer>;\r\n}","export const UUID = (): string => {\r\n  let result = ''\r\n  const characters =\r\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n  const charactersLength = characters.length\r\n  for (let i = 0; i < 12; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength))\r\n  }\r\n  return result\r\n}\r\n","import React, { useState } from 'react'\nimport './App.css'\nimport Title from './components/Title'\nimport TextInput from './components/textInput/TextInput'\nimport TodoList from './components/list/List'\nimport Footer from './components/Footer'\nimport { UUID } from './utils'\n\nfunction App() {\n\n  interface todo {\n    id: string,\n    content: string,\n    completed: boolean\n  }\n\n  const [todoList, setTodoList] = useState<todo[]>([]);\n  const [list, setList] = useState<todo[]>([]);\n  const [type, setType] = useState<string>('All');\n\n  const addTodo = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === 'Enter') {\n      const todo: todo = {\n        content: e.currentTarget.value,\n        id: UUID(),\n        completed: false,\n      };\n      setTodoList([todo, ...todoList]);\n      setList(selectType(type, [todo, ...todoList]))\n      e.currentTarget.value = '';\n    }\n  }\n\n  const todoSelect = (e: any, id: string) => {\n    const list = todoList.map(item => {\n      if (item.id === id) {\n        item.completed = !item.completed;\n        e.currentTarget.checked = item.completed;\n      }\n      return item;\n    })\n    setTodoList(list);\n    setList(selectType(type, list));\n  }\n\n  const removeTodo = (id: string) => {\n    const list = todoList.filter(item => item.id !== id);\n    setTodoList(list);\n    setList(selectType(type, list))\n  }\n\n  const switchType = (type: string) => {\n    setList(selectType(type, todoList))\n  }\n\n  const selectType = (type: string, list: todo[]) => {\n    setType(type);\n    switch (type) {\n      case 'Active':\n        return list.filter(item => !item.completed);\n      case 'Completed':\n        return list.filter(item => item.completed);\n      default:\n        return [...list];\n    }\n  }\n\n  const editTodo = (e: React.KeyboardEvent<HTMLInputElement>, id: string) => {\n    const list = todoList.map(item => {\n      if (item.id === id) {\n        item.content = e.currentTarget.value;\n      }\n      return item;\n    })\n    setTodoList(list);\n    setList(selectType(type, list));\n  }\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <TextInput addTodo={addTodo} />\n      <TodoList\n        list={list}\n        todoSelect={todoSelect}\n        removeTodo={removeTodo}\n        editTodo={editTodo}\n      />\n      <Footer\n        list={list}\n        type={type}\n        switchType={switchType}\n      />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' }\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t// <React.StrictMode>\n\t\t<App />,\n\t// </React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}